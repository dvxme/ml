import numpy as np
import matplotlib.pyplot as plt

# Generate Synthetic Dataset
np.random.seed(42)
X = np.linspace(-3, 3, 100)  # 100 points between -3 and 3
Y = np.sin(X) + np.random.normal(0, 0.1, 100)  # Sin function with noise

# Add Bias Term
X_matrix = np.c_[np.ones(X.shape[0]), X]

# Gaussian Kernel Function
def get_weights(query_point, X, tau):
    return np.exp(-((X - query_point) ** 2) / (2 * tau ** 2))

# Locally Weighted Regression Function
def locally_weighted_regression(query_x, X, Y, tau):
    W = np.diag(get_weights(query_x, X, tau))  # Compute weight matrix
    theta = np.linalg.pinv(X_matrix.T @ W @ X_matrix) @ X_matrix.T @ W @ Y  # Solve normal equation
    return np.array([1, query_x]) @ theta  # Prediction for query_x

# Plot Setup
plt.figure(figsize=(10, 6))

# Try different bandwidth (tau) values
tau_values = [0.1, 0.3, 1.0]
for tau in tau_values:
    Y_pred = np.array([locally_weighted_regression(x, X, Y, tau) for x in X])
    plt.plot(X, Y_pred, label=f'Tau = {tau}')

# Plot the Original Data
plt.scatter(X, Y, color='black', label="Original Data", alpha=0.5)
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Locally Weighted Regression with Different Tau Values")
plt.legend()
plt.tight_layout()
plt.show()
