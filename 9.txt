# Import necessary libraries
import numpy as np
from sklearn.datasets import fetch_olivetti_faces
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score

# Load the Olivetti Face dataset
data = fetch_olivetti_faces(shuffle=True, random_state=42)

# Features (images flattened into vectors) and target (person labels)
X = data.data
y = data.target

# Split the data into training and testing sets (70% training, 30% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Create and train a Naive Bayes classifier
nb_classifier = GaussianNB()
nb_classifier.fit(X_train, y_train)

# Predict the labels for the test set
y_pred = nb_classifier.predict(X_test)

# Evaluate the accuracy of the classifier
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy of the Naive Bayes classifier: {accuracy * 100:.2f}%')

# Example: Classify a new test sample
# Randomly select a sample from the test set for demonstration
sample_index = 0
new_sample = X_test[sample_index].reshape(1, -1)  # Reshape to match expected input format

# Predict the class of the new sample
new_prediction = nb_classifier.predict(new_sample)

# Display the prediction result (person ID)
print(f'Predicted person ID for the new sample: {new_prediction[0]}')
