import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, f1_score, confusion_matrix


def main() -> None:
    # ---------- 1. Load data ----------
    df = pd.read_csv("Iris.csv")          # make sure the CSV is in your cwd
    feature_cols = [
        "SepalLengthCm",
        "SepalWidthCm",
        "PetalLengthCm",
        "PetalWidthCm",
    ]
    X = df[feature_cols]
    y = df["Species"]

    # ---------- 2. Train / Test split ----------
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.20, random_state=42, stratify=y
    )

    # ---------- 3. k-NN evaluation ----------
    def evaluate_knn(k: int, weighted: bool = False) -> tuple[float, float]:
        scheme = "distance" if weighted else "uniform"
        model = KNeighborsClassifier(n_neighbors=k, weights=scheme)
        model.fit(X_train, y_train)
        preds = model.predict(X_test)
        return accuracy_score(y_test, preds), f1_score(y_test, preds, average="weighted")

    for k in (1, 3, 5):
        acc, f1 = evaluate_knn(k)
        acc_w, f1_w = evaluate_knn(k, weighted=True)
        print(f"k={k:>2}  | Accuracy={acc:.2f}  F1={f1:.2f}")
        print(f" â†³ weighted | Accuracy={acc_w:.2f}  F1={f1_w:.2f}\n")
        # Uncomment if you want the confusion matrix
        # print(confusion_matrix(y_test, model.predict(X_test)), "\n")

    # ---------- 4. Visualisations ----------
    plot_corr_matrix(X)
    plot_scatter(df)


# ----- Helper plots ----------------------------------------------------------
def plot_corr_matrix(features: pd.DataFrame) -> None:
    plt.figure(figsize=(6, 5))
    sns.heatmap(features.corr(), annot=True, cmap="coolwarm", fmt=".2f")
    plt.title("Correlation Matrix Heatmap")
    plt.tight_layout()
    plt.show()


def plot_scatter(df: pd.DataFrame) -> None:
    plt.figure(figsize=(8, 5))
    sns.scatterplot(
        data=df,
        x="SepalLengthCm",
        y="PetalLengthCm",
        hue="Species",
        palette="Set1",
        s=70,
        edgecolor="k",
    )
    plt.title("Scatter of Sepal Length vs Petal Length")
    plt.xlabel("Sepal Length (cm)")
    plt.ylabel("Petal Length (cm)")
    plt.tight_layout()
    plt.show()


# --------------------------------------------------------------------------- #
if __name__ == "__main__":
    main()
