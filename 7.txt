import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# ---------------------- Load Auto MPG Dataset ----------------------
file_path = "auto-mpg.csv"  # Update this path if needed
df_auto_mpg = pd.read_csv(file_path)

# Convert 'horsepower' to numeric, handling missing values ('?')
df_auto_mpg["horsepower"] = pd.to_numeric(df_auto_mpg["horsepower"], errors='coerce')

# Drop rows with missing values
df_auto_mpg.dropna(inplace=True)

# Extract Features (Horsepower) and Target (MPG)
X_poly = df_auto_mpg[['horsepower']].astype(float)
Y_poly = df_auto_mpg['mpg'].astype(float)

# Split data into training and testing sets
X_train, X_test, Y_train, Y_test = train_test_split(X_poly, Y_poly, test_size=0.2, random_state=42)

# ---------------------- Polynomial Regression ----------------------
poly = PolynomialFeatures(degree=2)  # Degree 2 Polynomial Regression
X_train_poly = poly.fit_transform(X_train)
X_test_poly = poly.transform(X_test)

# Train Polynomial Regression Model
poly_reg = LinearRegression()
poly_reg.fit(X_train_poly, Y_train)

# Predict values
Y_pred_poly = poly_reg.predict(X_test_poly)

# Compute Mean Squared Error
mse_poly = mean_squared_error(Y_test, Y_pred_poly)
print("Polynomial Regression (Degree 2) MSE:", mse_poly)

# ---------------------- Plot Results ----------------------
# Sort test data for smoother plotting
sorted_indices = np.argsort(X_test.values.flatten())
X_test_sorted = X_test.values.flatten()[sorted_indices]
Y_test_sorted = Y_test.values.flatten()[sorted_indices]
Y_pred_sorted = Y_pred_poly[sorted_indices]

plt.figure(figsize=(8, 5))
plt.scatter(X_test, Y_test, color='blue', label="Actual MPG")
plt.plot(X_test_sorted, Y_pred_sorted, color='red', linewidth=2, label="Polynomial Regression (Degree 2)")
plt.xlabel("Horsepower")
plt.ylabel("MPG (Fuel Efficiency)")
plt.title("Polynomial Regression - Auto MPG Dataset")
plt.legend()
plt.tight_layout()
plt.show()
